import sys
import os

output = 'demosystem'

sources = [
            output+'.i',

            'soundsystem/soundsystem.cc',
            'soundsystem/src/FFT.cc',

            'imagesystem/imagesystem.cc',
            'imagesystem/src/Noise.cc',
            'imagesystem/src/Perlin.cc',
            'imagesystem/src/Checker.cc',  
          
            'scheduler/scheduler.cc',

            'timer/timer.cc',
        
            'maths/maths.cc',
            'maths/src/dsp.cc',
            'maths/src/complex.cc', 
   
            'window/window.cc',

            'font/font.cc',
            'font/glFont.cc',

            'shell/shell.cc',

            'effect/effect.cc',
         ]

baselibrarypath = '../../BaseLibrary/'

env = Environment(tools = ['default','swig'],
                  ENV   = {'PATH' : os.environ['PATH']})

def checkTool(env,tool):
    if env.Detect(tool) == None:
        print "No '"+tool+"' tool detected, install it or put it into the $PATH"
        Exit()

checkTool(env,'swig')

if sys.platform == 'darwin':
    env.Append(CPPDEFINES=['__MACOSX__'])

    env.Append(CPPPATH=[baselibrarypath])
    
    env.Append(LIBPATH=[baselibrarypath])
    env.Append(LIBS=['vasik'])

    # window
    env.Append(LIBS=['glfw'])
    # imagesystem
    env.Append(LIBS=['freeimage'])
    # soundsystem
    env.Append(LIBS=['fmodx86','fftw3'])
    # maths
    env.Append(LIBS=['m'])
    # font
    env.Append(LIBS=['freetype'])

    env.Replace(SWIGFLAGS='-c++ -lua -I'+baselibrarypath)

    env.Replace(SHLINKFLAGS='-bundle -undefined dynamic_lookup')

    env.Append(SHLINKFLAGS=' -framework Carbon');
    env.Append(SHLINKFLAGS=' -framework Cocoa')
    env.Append(SHLINKFLAGS=' -framework OpenGL')
    env.Append(SHLINKFLAGS=' -framework AGL')    

    env.Replace(SHLIBPREFIX='')
    env.Replace(SHLIBSUFFIX='.so')

    objs = env.SharedObject(sources)
    target = env.SharedLibrary(output,objs)
elif sys.platform == 'linux2':
    env.Append(CPPDEFINES=['__LINUX__'])

    env.Append(CPPPATH=[baselibrarypath])
    
    env.Append(LIBPATH=[baselibrarypath])
    env.Append(LIBS=['vasik'])

    # window
    env.Append(LIBS=['glfw'])
    env.Append(LIBS=['pthread','X11','Xrandr','GL','GLU'])
    # imagesystem
    env.Append(LIBS=['freeimage'])
    env.Append(LIBS=['GL','GLU'])
    # soundsystem
    env.Append(LIBS=['fmodx86','fftw3'])
    # maths
    env.Append(LIBS=['m'])
    # font
    env.Append(LIBS=['freetype'])

    env.Replace(SWIGFLAGS='-c++ -lua -I'+baselibrarypath)

    env.Replace(SHLINKFLAGS='-shared')

    env.Replace(SHLIBPREFIX='')
    env.Replace(SHLIBSUFFIX='.so')

    objs = env.SharedObject(sources)
    target = env.SharedLibrary(output,objs)
elif sys.platform == 'win32':
    checkTool(env,'mt')

    env.Append(CPPDEFINES=['__WIN32__'])
    env.Append(CPPDEFINES=[('_SECURE_SCL',0)])

    # say to freeimage we're linking to the static library
    env.Append(CPPDEFINES=['FREEIMAGE_LIB'])
    # say to glfw we're linking to the static library
    env.Append(CPPDEFINES=['GLFW_EXPORTS'])
    # say to glfw we're building a wrapper dll not an exe
    env.Append(CPPDEFINES=['GLFW_BUILD_DLL'])

    env.Append(CPPFLAGS=['/EHsc'])
    env.Append(CPPFLAGS=['/MT'])

    env.Append(CPPPATH=[baselibrarypath])

    env.Append(LIBPATH=[baselibrarypath])
    env.Append(LIBS=['vasik'])

    # window
    env.Append(LIBS=['glfw'])
    env.Append(LIBS=['opengl32','glu32'])
    # imagesystem
    env.Append(LIBS=['freeimage'])
    env.Append(LIBS=['opengl32','glu32'])
    # soundsystem
    env.Append(LIBS=['fmodvc','fftw3'])
    # font
    env.Append(LIBS=['freetype'])

    env.Append(LIBS=['user32'])   # glfw,fmod: ...
    env.Append(LIBS=['advapi32']) # fmod: RegCloseKey
    env.Append(LIBS=['ole32'])    # fmod: CoInitialize
    env.Append(LIBS=['msacm32'])  # fmod: acmStreamOpen
    env.Append(LIBS=['wsock32'])  # fmod: inet_ntoa
    env.Append(LIBS=['winmm'])    # fmod: mixerOpen

    env.Replace(SWIGFLAGS='-c++ -lua -I'+baselibrarypath)

    env.Replace(SHLINKFLAGS='');
    env.Append(SHLINKFLAGS=['/ltcg'])
    env.Append(SHLINKFLAGS=['/dll'])
    env.Append(SHLINKFLAGS=['/nodefaultlib:libcmt.lib'])
    env.Append(SHLINKFLAGS=['/nodefaultlib:libc.lib'])
    env.Replace(SHLIBPREFIX='')
    env.Replace(SHLIBSUFFIX='.dll')

    objs = env.SharedObject(sources)
    target = env.SharedLibrary(output,objs)

    env.AddPostAction(target, 'mt.exe -nologo -manifest ${TARGET}.manifest -outputresource:$TARGET;2')
    env.Clean(target, output+'.dll.manifest')
import sys
import os

output = 'framework'

sources = [
            'framework.i',
            'framework.cc',
          ]

baselibrarypath = '../../BaseLibrary/'
         
env = Environment(tools = ['default','swig'],
                  ENV   = {'PATH' : os.environ['PATH']})

def checkTool(env,tool):
    if env.Detect(tool) == None:
        print "No '"+tool+"' tool detected, install it or put it into the $PATH"
        Exit()

checkTool(env,'swig')
    
if sys.platform == 'darwin':
    env.Append(CPPDEFINES=['__MACOSX__'])

    env.Append(CPPPATH=[baselibrarypath])

    env.Append(LIBPATH=[baselibrarypath])
    env.Append(LIBS=['vasik'])

    env.Replace(SWIGFLAGS='-c++ -lua -I'+baselibrarypath)

    env.Replace(SHLINKFLAGS='-bundle -undefined dynamic_lookup')
    env.Replace(SHLIBPREFIX='')
    env.Replace(SHLIBSUFFIX='.so')

    objs = env.SharedObject(sources)
    target = env.SharedLibrary(output,objs)
elif sys.platform == 'linux2':
    env.Append(CPPDEFINES=['__LINUX__'])

    env.Append(CPPPATH=[baselibrarypath])

    env.Append(LIBPATH=[baselibrarypath])
    env.Append(LIBS=['vasik'])

    env.Replace(SWIGFLAGS='-c++ -lua -I'+baselibrarypath)

    env.Replace(SHLINKFLAGS='-shared')
    env.Replace(SHLIBPREFIX='')
    env.Replace(SHLIBSUFFIX='.so')

    objs = env.SharedObject(sources)
    target = env.SharedLibrary(output,objs)
elif sys.platform == 'win32':
    checkTool(env,'mt')

    env.Append(CPPDEFINES=['__WIN32__'])
    env.Append(CPPDEFINES=[('_SECURE_SCL',0)])

    env.Append(CPPFLAGS=['/EHsc'])
    env.Append(CPPFLAGS=['/MT'])

    env.Append(CPPPATH=[baselibrarypath])

    env.Append(LIBPATH=[baselibrarypath])
    env.Append(LIBS=['vasik'])

    env.Replace(SWIGFLAGS='-c++ -lua -I'+baselibrarypath)

    env.Replace(SWIGFLAGS='-c++ -lua -I'+baselibrarypath)

    env.Replace(SHLINKFLAGS='');
    env.Append(SHLINKFLAGS=['/dll'])
    env.Replace(SHLIBPREFIX='')
    env.Replace(SHLIBSUFFIX='.dll')

    objs = env.SharedObject(sources)
    target = env.SharedLibrary(output,objs)

    env.AddPostAction(target, 'mt.exe -nologo -manifest ${TARGET}.manifest -outputresource:$TARGET;2')
    env.Clean(target, output+'.dll.manifest')
